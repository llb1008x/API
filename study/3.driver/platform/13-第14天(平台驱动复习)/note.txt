0,写一个内核模块
1,定义一个file_operations结构体
2,并且填充必要的驱动功能函数(open,read,write)，并且将其赋值给file_operations结构体
3,将赋值好的file_operations结构体注册进内核(使用register_chrdev函数)
4,创建设备文件

1,设备模型，描述了内核中对于设备的管理方式(虚拟总线的实现方式)
2,内核对象，关于内核整个工程搭建的基本对象
3,sys文件系统，其实就是根目录下的/sys文件夹
4,热插拔(软件方面对于热插拔的响应机制)

1，调用platform_driver_register对platform_driver进行注册，其内部对platform_driver结构体的
device_driver里面bus_type，probe，remove成员进行赋值，然后调用driver_register去注册
device_driver。
(platform_driver->device_driver->probe被赋值为platform_drv_probe)

2，经过一系列的调用，最终调用匹配函数，匹配成功之后调用device_driver里面的probe函数。
(其实它进行过一个判断，判断总线bus_type里面是否有probe,若有，则优先调用，若无，则
调用device_driver里面的probe成员)

3，由于device_driver成员里面的probe被赋值为了platform_drv_probe，所以，当匹配完成之后，
其实就是调用platform_drv_probe函数，那么这个函数完成根据传入的device结构体派生出
platform_device，同时被派生出来的还有platform_driver结构体。

4，紧接着，platform_drv_probe就会调用platform_driver->probe函数去完成我们要求的任务。

/sys本质上就是内核提供给用户的一个能够让用户操作内核中功能(使用内核功能的一个接口文件夹)

cd /sys/class/gpio
echo 130 > export
cd gpio130
echo out > direction
echo 1 > value

2的3 8
2的4 16
2的5 32
2的10 1024
2的16 65536
2的32 4G
2的64 4G*4G

