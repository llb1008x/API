首先, GTK+是不允许两个线程对X Window进行同时绘制, 如果你在两个线程同时执行GTK+代码, 一般会得到 “BadWindow” 错误.

那么怎么用单线程的限制开发多线程应用程序呢?

首先, 我们需要理解两个概念: 图形应用程序的原理 和 人眼中对流畅的感知

图形应用程序本质就是针对用户动作后用画面呈现结果的程序, 不同画面的切换我们称为画面帧,  画面帧切换与动作同时变化就形成了简单的交互.

一般流畅的标准是每秒30帧, 也就是说不同画面帧在33毫秒重绘一次, 人眼就感觉很流畅了.

OK, 如果知道上面的原理其实剩下的就很简单了, 一个多线程的图形化应用程序其实是不需要真正开启多个”绘制线程”的, 其实一个”绘制线程”就可以了, 我们可以开启任意多个”事务线程”(不做绘制的线程).

在GTK+里面开发多线程程序的精髓就是: 分离耗时操作和图形绘制操作
耗时操作是在人眼感觉到卡的间隔内(200毫秒)无法完成的操作, 比如去网上抓取大量的信息
图形绘制操作是涉及到GTK+的代码部分, 绘制代码必须在200毫秒之内完成以保证重绘流畅, 一般如果图形绘制操作在200毫秒以上就证明图形重绘太复杂或者还有耗时操作代码没有分离出去

如果能清楚分离出自己代码中哪一部分是耗时操作, 哪一部分是图形绘制操作, 剩下的就很简单,
把耗时操作和图形绘制的代码都放在新建的子线程中, 唯一要注意的地方就是, 一旦在新线程中执行图形绘制代码时, 需要用 gdk_threads_enter() 和 gdk_threads_leave() 对GTK+代码进行包装, 以保证图形绘制代码会强制执行在GTK+主线程中, 这样既防止在多个线程中同时执行GTK+代码又保证了耗时操作不会卡住主线程.

