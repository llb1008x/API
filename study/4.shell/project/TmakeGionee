#!/bin/bash
# \033[显示方式;前景色;背景色m
# 显示方式:0（默认值）、1（高亮）、22（非粗体）、4（下划线）、24（非下划线）、5（闪烁）、25（非闪烁）、7（反显）、27（非反显）
# 前景色:30（黑色）、31（红色）、32（绿色）、 33（黄色）、34（蓝色）、35（洋红）、36（青色）、37（白色）
# 背景色:40（黑色）、41（红色）、42（绿色）、 43（黄色）、44（蓝色）、45（洋红）、46（青色）、47（白色）
# \033[0m 默认
# \033[1;32;40m 绿色
# 033[1;31;40m 红色

COLOR_ERROR_PREFIX='\033[1;31;48m [ERROR]'
COLOR_WARNING_PREFIX='\033[1;33;48m [WARNING]'
COLOR_SUCCESS_PREFIX='\033[1;32;48m [SUCCESS]'
COLOR_GREEN_PREFIX='\033[1;32;48m'
COLOR_BLUE_PREFIX='\033[1;34;48m'
COLOR_SUFFIX='\033[0m'

PROJECT_TYPE="ROM"

BUILD_CCACHE=""
BUILD_CCACHE_PATH=""
MTK_PROJECTCONFIG_MK=""
GN_COMPILE_TOOLS_PATH="gionee/config"
#Gionee Alex_Ma add for modem compilation start
BP_MP_PATH=$(ls ../ | grep "modem")/MP
BP_CTA_PATH=$(ls ../ | grep "modem")/CTA
GN_GIONEE_PROJECT_CODE="gionee/code/driver/project/"
#Gionee Alex_Ma add for modem compilation end

usage(){
local tools_name=$(basename $0)
printf "
Usage : ./${tools_name} [Options] GBW8901A01_A  Actions

    Options:
      -l, -listp    : List the available project.
	  -h,  -help    : Print this message and exit.
	  #-t, -tee      : Print log information on the standard-out.
	  #-q, -quiet    : Don't print log information on the standard-out.
	  #-j [N], cpu [N]
	  #              : Allow N jobs to compile at once,you must add a space between Options and [N].
	  #-m [MODULE]   : Only compile the [MODULE], you must add a space between Options and [MODULE].
	
    Actions:
        -n, --new             : Clean and perform a full build.
        -r, --remake          : retry perform a build.
		-u, --update_api      : update-api.
        -c, --copy_target     : copy target to release only.
        -C, --copy_gionee     : copy gionee code to alps dir
		-a, --android         : build android
        --all,                : build Modem and AP imager(modem+ap new)
        -s, --sign            : sign image
        --setup_ccache        : Set CCACHE for faster incremental builds
      
    Module:
        -i, --image  <bootimage|systemimage|userdataimage|update-api|kernel|otapackage|modem> 
            :Specify image to be build/re-build (bootimage|systemimage|userdataimage|recoveryimage).
            :Specify module to be build/re-build (kernel|otapackage).

    Project:
        -p, --project  <packages/app/Email/>
            :Specif Project pathdir to be build

    Example:
	  ./${tools_name} -l
	                : 列出可编译的产品id

      ./${tools_name} [-v <user|eng|userdebug>] GBW8901A01_A <--all>
	                : 编译所有产品，先编译MODEM-->COPY 到 AP Gionee 目录---->AP --new

	  ./${tools_name} [-v <user|eng|userdebug>] GBW8901A01_A <-n|--new>
	                : 编译产品 GBW8901A01_A 的user or eng or userdebug 版本

	  ./${tools_name} GBW8901A01_A <-n|-r> --setup_ccache /home/ranyi/ccache
	                : 编译产品 GBW8901A01_A 开启ccache功能，并设置缓存目录为/home/ranyi/ccache
	                
	  ./${tools_name} GBW8901A01_A -i <bootimage|systemimage|bootimage|modem>
	                : 编译产品GBW8901A01_A 的bootimage | systemimage | bootimage. 还可以是kernel,otapackage等模块
                        :  -i modem 先编译MODEM，编译镜像 /modem_mtk_6755_mp/MP/release, 不COPY 到AP端

	  ./${tools_name} GBW8901A01_A -p package/app/Email
	                : 编译产品GBW8901A01_A的一个apk.还可是以framework.jar等project.
"
}

error(){
    local ret="$1";shift
    local info="$@"
    if [ "$ret" -ne 0 ];then
        echo "Error $ret: $info" >&2
        exit $ret
    fi
}

get_opts(){
    argv="$@"
    #兼容服务器编译
    local build_variant=$(expr match  "$argv" '-opt=TARGET_BUILD_VARIANT=\(\w*\)')
    if [ "$build_variant" == "user" -o "$build_variant" == "userdebug" -o  "$build_variant" == "eng" ];then
        TARGET_BUILD_VARIANT=$build_variant
        shift
        echo $@
    fi
    
    opts=$(getopt -o cCuahi:Kkslnp:rtv: --long all,copy_target,copy_gionee,android,update_api,help,image:,cert1,key,sign,listp,new,project,setup_ccache:,remake,tee,target_build_variant:,clear_ccache -- "$@")     
    if [ $? -ne 0 ];then
        usage 
        exit 1
    fi

    eval set -- "$opts"
    while true 
    do
        case "$1" in 
           #Gionee Alex MA add all for modem compilation
            --all)
               ACTION=all
               shift
                ;;
            -c|--copy_target)
                COPY_TARGET=true
                shift
                ;;
            -C|--copy_gionee)
                COPY_GIONEE=true
                shift
                ;;
            -i|--image)
                MODULE=$2
                shift 2
                ;;
            -n|--new)
                ACTION=new
                shift
                ;;
            -p|--project)
                PROJECT_PATH=$2
                shift 2
                ;;
            -r|--remake)
                ACTION=remake
                shift 
                ;;
            -u|--update_api)
                ACTION=update_api
                shift 
                ;;
            -a|--android)
                ACTION=android
                shift 
                ;;
            -v|--target_build_variant)
                TARGET_BUILD_VARIANT=$2
                shift 2
                ;;
            -t|--tee)
               	DEBUG="-d" 
                shift 
                ;;
            -l|--listp)
                perl ${GN_COMPILE_TOOLS_PATH}/listP.pl
                shift 
                exit 0
                ;;
            -K|--cert1)
                ACTION=cert1
                shift 
                ;;
            --clear_ccache)
                export GN_CLEAN_CCACHE="true"
                shift 
                ;;
            --setup_ccache)
            	BUILD_CCACHE="--setup_ccache"
                BUILD_CCACHE_PATH=$2
                shift 2
                ;;
            -k|--key)
                ACTION=key
                shift 
                ;;
            -s|--sign)
                ACTION=sign
                shift 
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            --)
                shift
                break
                ;;
            *)
                usage
                exit 1
                ;;
        esac
    done

    if [ -z "$ACTION" -a -z "$MODULE" -a -z "$PROJECT_PATH" -a -z "$COPY_TARGET" -a -z "$COPY_GIONEE" ];then
        echo "Error 1: Specify action to be build/re-build"
        usage
        exit 1
    fi

    GIONEEPRODUCTID=$@ 
    if [ ! -e "${GN_COMPILE_TOOLS_PATH}/${GIONEEPRODUCTID}.mk" ];then
        echo "Error 2: *********** product file not exist! ***********"
        exit 2
    fi

    if  [ -n "$PROJECT_PATH" -a ! -d "$PROJECT_PATH" ];then
        echo "Error 3: ***********$PROJECT_PATH not exist ************"
        exit 3
    fi
    echo "BUILD_CCACHE:[${BUILD_CCACHE}],BUILD_CCACHE_PATH:[${BUILD_CCACHE_PATH}]"
}

export_variable_from(){
    local file=$1
    if [ -e "$file" ];then

        #modify for CR01549696 begin
        if [ "$TARGET_BUILD_VARIANT" != "user" ];then
            export MTK_BUILD_ROOT=yes
        else
            sed -i '/MTK_BUILD_ROOT\s*=\s*yes/d' "$file"
        fi
        #modify for CR01549696 end

        while read line
        do
            #去掉空行，'#'开头，含有':=',不含有'='的行
            [ -z "$line" -o "${line:0:1}" == "#" ] && continue
            [ -z "$(expr match "$line" '.*\(=\).*')" ] && continue
            [ -n "$(expr match "$line" '.*\(:=\).*')" ] && continue
            [ -n "$(expr match "$line" '.*\(+=\).*')" ] && continue
            local key=`echo ${line%=*}`
            local value=`echo ${line#*=}`
            export "$key"="$value"
        done < $file
    else
        echo "$file not exist"
    fi
}

create_gn_cflags(){
    local file="$1"
    #GN_CFLAGS_CONFIG_FILE 必须绝对路径
    GN_CFLAGS_CONFIG_FILE=$GN_BUILD_ROOT_DIR/${GN_COMPILE_TOOLS_PATH}/.gn_cflags_config
    export GN_CFLAGS_CONFIG_FILE

    GN_CFLAGS="GN_CFLAGS +="
    GN_KBUILD_CFLAGS="GN_KBUILD_CFLAGS +="
    if [ -f "$1" ];then 
        mkdir -p $(dirname $GN_CFLAGS_CONFIG_FILE)
        rm -rf $GN_CFLAGS_CONFIG_FILE
        > $GN_CFLAGS_CONFIG_FILE
        while read line
        do
            [ -z "$line" -o "${line:0:1}" == "#" ] && continue;
            #约定 CONFIG GN_BSP GN_QBSP 开头的宏 为驱动配置宏
            [ "${line:0:6}" != "CONFIG" -a "${line:0:6}" != "GN_BSP"  ] && continue
            key=$(echo ${line%=*})
            value=$(echo ${line#*=})
            if [ "$value" == "n" -o "$value" == "no" ];then
                :
            elif [ "$value" == "y" -o "$value" == "yes" ];then 
                GN_CFLAGS+=" -D$key" 
                if [ "${line:0:6}" == "CONFIG" ];then
                    echo "$key=y" >> $GN_CFLAGS_CONFIG_FILE
                    GN_KBUILD_CFLAGS+=" -D$key"
                fi
            else 
                GN_CFLAGS+=" -D$key=$value"
            fi 
        done <"$1"
        echo $GN_CFLAGS >> $GN_CFLAGS_CONFIG_FILE
        echo $GN_KBUILD_CFLAGS>> $GN_CFLAGS_CONFIG_FILE
    fi 
}


function getProjectNameSuffix()
{
	PROJECT_TYPE=""
	if [[ -n $(echo ${GIONEEPRODUCTID} | grep "platform") ]];then
		PROJECT_TYPE="platform"
	elif [[ -n $(echo ${GIONEEPRODUCTID} | grep "CMCC_CTA") ]];then
		PROJECT_TYPE="CTA"
	elif [[ -n $(echo ${GIONEEPRODUCTID} | grep "CMCC") ]];then
		PROJECT_TYPE="CMCC"
	elif [[ -n $(echo ${GIONEEPRODUCTID} | grep "CTA") ]];then
		PROJECT_TYPE="CTA"
	elif [[ -n $(echo ${GIONEEPRODUCTID} | grep "CT") ]];then
		PROJECT_TYPE="CT"
	else
		PROJECT_TYPE="ROM"
	fi
	echo "GIONEEPRODUCTID:[${GIONEEPRODUCTID}],PROJECT_TYPE:[${PROJECT_TYPE}]"
}

prebuild(){
    GN_PROJECT=$GIONEEPRODUCTID
    #GIONEEPROJECTID=${GIONEEPRODUCTID:0:7}
    GIONEEPROJECTID=${GIONEEPRODUCTID}
    export GN_PROJECT GIONEEPRODUCTID GIONEEPROJECTID 
	getProjectNameSuffix
	#gionee ranyi add for sign mk files 2016.06.27 start
	#同项目的签名软件版本需要单独处理mk文件
	#举例：
	#当前正常版本 BBL7516A.mk ，改项目的签名版本为 BBL7516A_sign.mk
	#编译前，将 BBL7516A.mk 覆盖到 device/gionee_bj/gnbj6755_66_m/ProjectConfig.mk ，
	#然后再将 BBL7516A_sign.mk 内容追加到 device/gionee_bj/gnbj6755_66_m/ProjectConfig.mk 文件中
	local tmpProjectName=${GIONEEPRODUCTID%%_sign}
	echo "tmpProjectName:[${tmpProjectName}]"
	#FIXME: not a good way to obtian TARGET_PRODUCT
	TARGET_PRODUCT=`grep  -w 'TARGET_PRODUCT' ${GN_COMPILE_TOOLS_PATH}/${tmpProjectName}.mk | sed 's/ //g' | grep '^TARGET_PRODUCT' | awk -F= '{print $2}'`
	[ "${PROJECT_TYPE}" == "platform" -o "${PROJECT_TYPE}" == "CTA" -o "${PROJECT_TYPE}" == "CMCC" -o "${PROJECT_TYPE}" == "CT" ] && BUILD_OPTIONS="platform" 
	MTK_PROJECTCONFIG_MK="device/gionee_bj/${TARGET_PRODUCT/full_}/ProjectConfig.mk"
	export BUILD_OPTIONS TARGET_PRODUCT MTK_PROJECTCONFIG_MK PROJECT_TYPE

	echo "cp ${GN_COMPILE_TOOLS_PATH}/${tmpProjectName}.mk ${MTK_PROJECTCONFIG_MK}"
	cp ${GN_COMPILE_TOOLS_PATH}/${tmpProjectName}.mk ${MTK_PROJECTCONFIG_MK}
	if [ "${GIONEEPRODUCTID:(-5):5}" = "_sign" ];then
		echo "cur is sign type,append ${GIONEEPRODUCTID}.mk to ${MTK_PROJECTCONFIG_MK}"
		while read line
		do
			echo ${line} >> ${MTK_PROJECTCONFIG_MK}
		done <${GN_COMPILE_TOOLS_PATH}/${GIONEEPRODUCTID}.mk
	fi
	#gionee ranyi add for sign mk files 2016.06.27 end
	
    #gionee, chuqf, to get mtk_platform, begin
    #FIXME: not a good way to obtian MTK_PLATFORM
    MTK_PLATFORM=`grep  -w 'MTK_PLATFORM' ${GN_COMPILE_TOOLS_PATH}/${tmpProjectName}.mk | sed 's/ //g' | grep '^MTK_PLATFORM' | awk -F= '{print $2}'`
    #gionee, chuqf, to get mtk_platform, end
    
    #export product.mk begin
    export_variable_from "${GN_COMPILE_TOOLS_PATH}/${tmpProjectName}.mk"
    #export product.mk end
    create_gn_cflags "${GN_COMPILE_TOOLS_PATH}/${tmpProjectName}.mk"

    #export release version begine
    [ ! -e "${GN_COMPILE_TOOLS_PATH}/${GIONEEPROJECTID}_VerNumber" ] && echo "MINI_VER_NUMBER=T0001">${GN_COMPILE_TOOLS_PATH}/${GIONEEPROJECTID}_VerNumber
    . ${GN_COMPILE_TOOLS_PATH}/${GIONEEPROJECTID}_VerNumber
    GN_RO_GN_GNZNVERNUMBER=BJ_${GIONEEPRODUCTID}_${MINI_VER_NUMBER}
    export MINI_VER_NUMBER GN_RO_GN_GNZNVERNUMBER
    #export release version end
	echo "MINI_VER_NUMBER:[${MINI_VER_NUMBER}],GN_RO_GN_GNZNVERNUMBER:[${GN_RO_GN_GNZNVERNUMBER}]"
	
    #gn ro 
    if [ "${GN_OVERSEA_PRODUCT}" == "yes" ];then
        GN_INTERNAL_VER_NUMBER=${GIONEEPRODUCTID}_V${MINI_VER_NUMBER:1:4}
        GN_OVERSEA_EXTERNAL_VERNUMBER=${GN_PRODUCT_MODEL}_$(echo ${GN_INTERNAL_VER_NUMBER}|cut -d '_' -f 2,3)
        export  GN_INTERNAL_VER_NUMBER GN_OVERSEA_EXTERNAL_VERNUMBER
    else
        #GN_RO_GN_GNVERNUMBER=${GN_RO_GN_EXTMODEL}-GN${GIONEEPRODUCTID:0:7}-T${GN_RO_GN_GNVERNUMBERREL}-$(echo ${GIONEEPRODUCTID}|awk -F'_' '{print $2}')
        GN_RO_GN_GNVERNUMBER=${GN_RO_GN_EXTMODEL}-GN${GIONEEPROJECTID}-T${GN_RO_GN_GNVERNUMBERREL}-$(echo ${GIONEEPRODUCTID}|awk -F'_' '{print $2}')
        export GN_RO_GN_GNVERNUMBER
    fi
    echo "GN_RO_GN_GNVERNUMBER:[${GN_RO_GN_GNVERNUMBER}]"

    mkdir -p $LOGPATH
}

get_gionee_code(){
    echo "get_gionee_code"
    local vendor=$1
    local version=$2
    #copy gionee dir code to alps 
    bash ${GN_COMPILE_TOOLS_PATH}/tools/gn_prebuild.sh $vendor $version
}

set_kernel_config(){
    #函数中未定义的变量都来源于export_variable_from中的export
    if [ "$TARGET_BUILD_VARIANT" != "user" -a -f "$GN_KERNEL_CFG_FILE_ENG" ];then
        GN_KERNEL_CFG_FILE=$GN_KERNEL_CFG_FILE_ENG
    fi

    #echo $GN_KERNEL_CFG_FILE

    if [ -f "$GN_KERNEL_CFG_FILE" ];then
        while read line
        do
            [ -z "$line" -o "${line:0:1}" == "#" ] && continue
            local key=${line%=*}
            local value=${line#*=}
            [ -z "$key" -o -z "$value" ] && continue

            if ! `echo "$key" | grep -q "^CONFIG"`;then
                continue
            fi

            #echo $line

            if [ "$value" == "n" -o "$value" == "no" ];then
                if `grep -qw "$key" $GN_KERNEL_CFG_FILE` ;then
                    sed -i "/\<$key\>/c\# $key is not set" $GN_KERNEL_CFG_FILE
                else
                    echo "# $key is not set" >> $GN_KERNEL_CFG_FILE
                fi

            elif [ "$value" == "y" -o "$value" == "yes" ];then
                if `grep -qw "$key" $GN_KERNEL_CFG_FILE` ;then
                    sed -i "/\<$key\>/c\\$key=y" $GN_KERNEL_CFG_FILE
                else
                    echo "$key=y" >> $GN_KERNEL_CFG_FILE
                fi

            else
                if `grep -qw "$key" $GN_KERNEL_CFG_FILE` ;then
                    sed -i "/\<$key\>/c\\$key=$value" $GN_KERNEL_CFG_FILE
                else
                    echo "$key=$value" >> $GN_KERNEL_CFG_FILE
                fi
            fi
        done < ${MTK_PROJECTCONFIG_MK}
    else
        echo "kernel config file: $GN_KERNEL_CFG_FILE not exist"
    fi
}

get_release_version(){
    echo "get_release_version"
    #函数中未定义的变量都来源于export_variable_from中的export
    GN_RELEASE_DIR="release/$GN_RO_GN_GNZNVERNUMBER"
    GN_RELEASE_OTA_DIR_ROOT=${GN_RELEASE_DIR}_OTA
    GN_RELEASE_OTA_TMP_DIR=${GN_RELEASE_OTA_DIR_ROOT}/tmp
    GN_RELEASE_OTA_DIR=${GN_RELEASE_OTA_DIR_ROOT}/ota
    GN_RELEASE_MODEM_DIR="$GN_RELEASE_DIR/bp_image"
}

create_product_for_flash_tool(){
    if [ -e "./${GN_COMPILE_TOOLS_PATH}/tools/gn_output_product_info.sh" ];then
        bash ./${GN_COMPILE_TOOLS_PATH}/tools/gn_output_product_info.sh ${GIONEEPRODUCTID} ${GN_RELEASE_DIR}
    fi
}

copy_results_to_release(){
    echo "copy_results_to_release"
    [ -d "$GN_RELEASE_DIR" ] && rm -rf $GN_RELEASE_DIR
    mkdir -p $GN_RELEASE_DIR
    
    PRODUCT_OUT_ROOT="out/target/product"
    GN_TARGET_PRODUCT=${TARGET_PRODUCT/full_}
    TARGET_PRODUCT_OUT_ROOT="$PRODUCT_OUT_ROOT/${GN_TARGET_PRODUCT}"

    
    #copy image
    #while read file
    #do
    #    if [ -f "${TARGET_PRODUCT_OUT_ROOT}/$file" ];then
    #        rsync -aq ${TARGET_PRODUCT_OUT_ROOT}/$file $GN_RELEASE_DIR/
    #    else
    #        echo "Wanning: ${TARGET_PRODUCT_OUT_ROOT}/$file does no exist"
    #    fi
    #done < ${GN_COMPILE_TOOLS_PATH}/release_files
    
    #lihuafang modify begin
    if [ -d "${TARGET_PRODUCT_OUT_ROOT}" ];then
        echo "cp img,bin,txt,EBR1,EBR2,MBR"
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/*.img $GN_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/*.bin $GN_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/*.mbn $GN_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/*.txt $GN_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/EBR1 $GN_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/EBR2 $GN_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/MBR $GN_RELEASE_DIR/;
    else
        echo "Wanning: ${TARGET_PRODUCT_OUT_ROOT} does no exist"
    fi
    #lihuafang modify end

    #gionee, chuqf, for tee raw imgs, begin
    cp -f ${TARGET_PRODUCT_OUT_ROOT}/trustzone/bin/*pad\.img $GN_RELEASE_DIR/
    #gionee, chuqf, for tee raw imgs, end

    #copy MDDB file
    local bpl_file=$(find $TARGET_PRODUCT_OUT_ROOT/obj/ETC -type f -name "MDDB_*" 2>/dev/null )
    if [ -f "$bpl_file"  ];then
        cp -r $bpl_file $GN_RELEASE_DIR/
    fi

    #copy modem files
    find $TARGET_PRODUCT_OUT_ROOT/obj -type f -name "APDB*" -exec cp \{} $GN_RELEASE_DIR \;
    find $TARGET_PRODUCT_OUT_ROOT/system/etc/mddb -type f -name "BP*" -exec cp \{} $GN_RELEASE_DIR \;

    #copy symbols to gn_backup
    if [ -d "$TARGET_PRODUCT_OUT_ROOT/symbols" ];then
        mkdir -p $PRODUCT_OUT_ROOT/gionee_backup/
        rsync -avq "$TARGET_PRODUCT_OUT_ROOT/symbols" "$PRODUCT_OUT_ROOT/gionee_backup/"
    fi
    
    #copy systemui R.java
    if [ -f "out/target/common/obj/APPS/SystemUI_intermediates/src/com/android/systemui/R.java" ];then
       cp --parents "out/target/common/obj/APPS/SystemUI_intermediates/src/com/android/systemui/R.java" "$PRODUCT_OUT_ROOT/gionee_backup/"
    fi
    
    #copy vmlinux for debug
    if [ -f "$TARGET_PRODUCT_OUT_ROOT/obj/KERNEL_OBJ/vmlinux" ];then
        cp "$TARGET_PRODUCT_OUT_ROOT/obj/KERNEL_OBJ/vmlinux" "$GN_RELEASE_DIR"
    fi

    #copy qcn
    if [ -f "./gionee/project/${GIONEEPRODUCTID}/${GIONEEPRODUCTID}.qcn" ];then
       cp "./gionee/project/${GIONEEPRODUCTID}/${GIONEEPRODUCTID}.qcn" "$GN_RELEASE_DIR"
    fi

    #gionee, chuqf, for fat.img, begin 
    if [[ -e ${GN_COMPILE_TOOLS_PATH}/tools/gen_fat.sh ]]; then
        chmod +x ${GN_COMPILE_TOOLS_PATH}/tools/gen_fat.sh
        ./${GN_COMPILE_TOOLS_PATH}/tools/gen_fat.sh ${MTK_PLATFORM} ${GIONEEPRODUCTID} ${GN_TARGET_PRODUCT} ${TARGET_PRODUCT_OUT_ROOT}
    fi
    #gionee, chuqf, for fat.img, end

    create_product_for_flash_tool

    local ota_zip=$(find ${TARGET_PRODUCT_OUT_ROOT}/ -maxdepth 1 -type f -name ${TARGET_PRODUCT}-ota-*.zip | sort -r | head -n 1  2>/dev/null)
    local ota_tmp_zip=$(find ${TARGET_PRODUCT_OUT_ROOT}/obj/PACKAGING/target_files_intermediates/ \
        -maxdepth 1 -type f -name ${TARGET_PRODUCT}-target_files-*.zip | sort -r | head -n 1 2>/dev/null)
    if [ -f "$ota_zip" ];then
        rm -rf $GN_RELEASE_OTA_DIR_ROOT
        mkdir -p $GN_RELEASE_OTA_TMP_DIR
        mkdir -p $GN_RELEASE_OTA_DIR
        cp -r $ota_zip $GN_RELEASE_OTA_DIR/${GIONEEPRODUCTID}_update_${GN_RO_BUILD_DISPLAY_ID}_${MINI_VER_NUMBER}.zip
        local ota_md5=$(md5sum $GN_RELEASE_OTA_DIR/${GIONEEPRODUCTID}_update_${GN_RO_BUILD_DISPLAY_ID}_${MINI_VER_NUMBER}.zip |awk '{print $1}')
        echo "${GIONEEPRODUCTID}_update_${GN_RO_BUILD_DISPLAY_ID}_${MINI_VER_NUMBER}.zip=$ota_md5" > $GN_RELEASE_OTA_DIR/${GIONEEPRODUCTID}_${MINI_VER_NUMBER}.md5
        cp -r $ota_tmp_zip $GN_RELEASE_OTA_TMP_DIR/${GIONEEPRODUCTID}_update_${GN_RO_BUILD_DISPLAY_ID}_${MINI_VER_NUMBER}_tmp.zip
    fi
}

build_cert1(){
    echo "${MTK_PLATFORM} ${GIONEEPRODUCTID}"
    ${GN_COMPILE_TOOLS_PATH}/tools/verified_boot_tools/gen_cert1.py -o release/ -i ${GIONEEPRODUCTID}
}

build_key(){
    echo "${MTK_PLATFORM} ${GIONEEPRODUCTID}"
    ${GN_COMPILE_TOOLS_PATH}/tools/verified_boot_tools/gen_verified_boot_keys -o release/ -i ${GIONEEPRODUCTID}
}

build_sign(){
    echo "${MTK_PLATFORM} ${GIONEEPRODUCTID}"
    ${GN_COMPILE_TOOLS_PATH}/tools/verified_boot_tools/gionee_sign.py ${MTK_PLATFORM} ${GIONEEPRODUCTID}
}

build_clean(){
    echo "build_clean"
    $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --clean_build $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-clean ${BUILD_CCACHE} ${BUILD_CCACHE_PATH}
    error "$?" "*********** build_clean *************"
}

build_update_api(){
    echo "build_update_api"
    $BUILD_TOOLS  --build_variant $TARGET_BUILD_VARIANT --update-api $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-update-api ${BUILD_CCACHE} ${BUILD_CCACHE_PATH}
    error "$?" "*********** build_update_api ************"
}

#Gionee Alex_Ma add for modem compilation start
build_modem(){
    echo -e "${COLOR_BLUE_PREFIX} MODEM LOG: modem building start ${COLOR_SUFFIX}"
    if [[ "${GIONEEPRODUCTID:(-3):3}" = "CTA" ]];then
        cd ../$BP_CTA_PATH
    else
        cd ../$BP_MP_PATH
    fi
    
    ./TmakeGionee ${GIONEEPRODUCTID:0:8} -n 2>&1 | tee $PWD/$LOGPATH/$TARGET_PRODUCT-$image 
    cd $PWD
}

copy_modem_to_ap(){
    echo -e "${COLOR_BLUE_PREFIX} MODEM LOG: copy modem imager to ap ${COLOR_SUFFIX}"

    #PWD ./android_mtk_6755_mp;  
    #modem imager : modem_mtk_6755_mp/MP or CTA /release_all
    #AP gioner : /android_mtk_6755_mp/gionee/code/driver/project/$GIONEEPRODUCTID/vendor/mediatek/proprietary/custom/$Targe(eg:gnbj6755_66_l)/modem

    GIONEE_MODEM_PATCH="./${GN_GIONEE_PROJECT_CODE}/${GIONEEPRODUCTID}/vendor/mediatek/proprietary/custom/${TARGET_PRODUCT}/modem"
    echo -e "${COLOR_BLUE_PREFIX} MODEM LOG: get GIONEE_MODEM_PATCH=${GIONEE_MODEM_PATCH}  ${COLOR_SUFFIX}"

    if [[ ! -f "$GIONEE_MODEM_PATCH/Android.mk" ]]; then
        echo -e "${COLOR_WARNING_PREFIX} MODEM LOG: makeure having $GIONEE_MODEM_PATCH/Android.mk  ${COLOR_SUFFIX}"
    fi
    #copy modem imager
    if [ -d "$GIONEE_MODEM_PATCH" ]; then
        rm -Rf ./GIONEE_MODEM_PATCH/gnbj6755*
        if [[ "${GIONEEPRODUCTID:(-3):3}" = "CTA" ]];then
	    cp -Rf ../$BP_CTA_PATH/release_all/* ./$GIONEE_MODEM_PATCH	
    	else
	    cp -Rf ../$BP_MP_PATH/release_all/* ./$GIONEE_MODEM_PATCH	
    	fi
    else
    	echo -e "${COLOR_ERROR_PREFIX} MODEM LOG: can't find dir $GIONEE_MODEM_PATCH  ${COLOR_SUFFIX}"
    	exit 1
    fi
}
#Gionee end

build_module(){
    echo "build_module"
    local image=$1
    #Gionee Alex_Ma add for modem compilation
    if `echo  "modem" | grep -qw "$image" `;then
	build_modem
    	error "$?" "************ build_$image ************"
        exit 0
    #Gionee end
    else
        echo "don't modem"
    	set_kernel_config
    	if `echo  "systemimage bootimage userdataimage" | grep -qw "$image" `;then
        	$BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --image $image  $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-$image ${BUILD_CCACHE} ${BUILD_CCACHE_PATH}
    	else
        	$BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --module $image  $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-$image --debug ${BUILD_CCACHE} ${BUILD_CCACHE_PATH}
   	fi
    error "$?" "************ build_$image ************"
    fi
}

sign_TaTee(){
	local tmpKPHSwitch=$(grep "GN_KPH_BUILD_SUPPORT=" ${MTK_PROJECTCONFIG_MK})
	tmpKPHSwitch=$(echo ${tmpKPHSwitch} | awk -F "=" '{printf("%s",$2)}')
	echo "tmpKPHSwitch:[${tmpKPHSwitch}]"
	if [ "${tmpKPHSwitch}" = "yes" ];then
		${GN_COMPILE_TOOLS_PATH}/tools/gn_sign_tatee.sh
	else
		echo -e "${COLOR_WARNING_PREFIX} 当前KPH开关为关! ${COLOR_SUFFIX}"
	fi
}

build_android(){
    echo "build_android"
    $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --android_build $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-android ${BUILD_CCACHE} ${BUILD_CCACHE_PATH}
    error "$?" "************ build_android ************"
}

build_copy_gn_code(){
    echo "build_copy_gn_code"
    get_gionee_code "mtk" "5.1"
    set_kernel_config
    sign_TaTee
}

build_copy_target(){
    echo "build_copy_target"
    get_release_version 
    copy_results_to_release
    error "$?" "*********** build_copy_target **********"
}

build_remake(){
    echo "build_remake"
    build_copy_gn_code
    build_update_api
    build_android
    build_copy_target
}

build_new(){
    echo "build_new"
    build_clean
    build_remake
}

build_project(){
    echo "build_project"
    local project_path=$1
    $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --project $PROJECT_PATH  $TARGET_PRODUCT  --log_file $LOGPATH/$TARGET_PRODUCT-mmm ${BUILD_CCACHE} ${BUILD_CCACHE_PATH}
    error "$?" "*********** build_project ************"
}


main(){
   get_opts "$@" 

   #Gionee Alex_Ma add for modem compilation
   if [ "$ACTION" = "all" ];then
       echo -e "${COLOR_BLUE_PREFIX} MODEM LOG: build modem fisrt for all action ${COLOR_SUFFIX}"
       build_modem
       copy_modem_to_ap
       #ap new start
       ACTION="new"
   fi
   #Gionee end

   prebuild

   #copy gionee code
   if [ -n "$COPY_GIONEE" ];then
       echo "copy gionee code"
       build_copy_gn_code
   fi

   if [ -n "$ACTION" ];then
       echo "********* build $ACTION *********"
       build_$ACTION
   fi

   if [ -n "$MODULE" ];then
       echo "********* build $MODULE*********"
       build_module $MODULE
   fi

   if [ -d "$PROJECT_PATH" ];then
       echo "********* build $PROJECT_PATH *********"
       build_project $PROJECT_PATH
   fi

   if [ -n "$COPY_TARGET" -o "$MODULE" == "otapackage" ];then
       echo "********* build copy target *********"
       build_copy_target
   fi

}

OPTS=""
MODULE=""
ACTION=""
SHOWLOG=false
GN_BUILD_ROOT_DIR=$(cd `dirname $0`; pwd)
export GN_BUILD_ROOT_DIR
TARGET_BUILD_VARIANT="eng"
BUILD_TOOLS="$GN_BUILD_ROOT_DIR/build.sh $DEBUG"
LOGPATH="BUILDING_LOG"
main "$@"
